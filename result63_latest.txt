See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (12 warnings)
PMD:          FAILED (25 warnings)
Checkstyle:   FAILED (0 errors, 58 warnings)

Correctness:  25/35 tests passed
Memory:       16/16 tests passed
Timing:       0/42 tests passed

Aggregate score: 62.86%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 19K May  1 16:38 KdTree.java
4.9K May  1 16:38 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D UP_UNUSED_PARAMETER UP: Static or private method KdTree.nearest(Point2D, KdTree$Node, KdTree$Node, double, Point2D) has unused parameters  At KdTree.java:[lines 456-484]
L D UCF_USELESS_CONTROL_FLOW UCF: Contains a useless control-flow statement, which leads to same result regardless of whether branch is taken.  At KdTree.java:[line 137]
L D UCF_USELESS_CONTROL_FLOW UCF: Contains a useless control-flow statement, which leads to same result regardless of whether branch is taken.  At KdTree.java:[line 192]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 91]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 183]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 280]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 289]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 374]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 386]
H D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'brute' but that value is never used.  At KdTree.java:[line 502]
M D UC_USELESS_VOID_METHOD UC: The void method 'debugCmp()' appears to serve no purpose.  At KdTree.java:[line 198]
L P SIC_INNER_SHOULD_BE_STATIC_ANON SIC: Should the inner class 'PointSET$1Node' be refactored into a static nested class?  At PointSET.java:[lines 74-90]
Warnings generated: 12


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:26: The private instance (or static) variable 'ROOT_ORIENTATION' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:30: The private instance (or static) variable 'rect' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:33: The private instance (or static) variable 'orientation' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:91: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:103: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:183: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:192: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:268: Avoid unused local variables, such as 'lt'. [UnusedLocalVariable]
KdTree.java:269: Avoid unused local variables, such as 'gt'. [UnusedLocalVariable]
KdTree.java:280: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:289: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:368: Avoid unused local variables, such as 'cmp'. [UnusedLocalVariable]
KdTree.java:369: Avoid unused local variables, such as 'diff_max'. [UnusedLocalVariable]
KdTree.java:370: Avoid unused local variables, such as 'diff_min'. [UnusedLocalVariable]
KdTree.java:374: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:386: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:399: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:399: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:408: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:408: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:453: Avoid unused parameter variables, such as 'prevNode'. [UnusedFormalParameter]
KdTree.java:502: Avoid unused local variables, such as 'brute'. [UnusedLocalVariable]
PointSET.java:58: Avoid unused local variables, such as 'i'. [UnusedLocalVariable]
PointSET.java:75: The private instance (or static) variable 'myCurP' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:76: The private instance (or static) variable 'myDistanceSq' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 25 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:24:5: Declare static variables before instance variables, constructors, and methods. [DeclarationOrder]
[WARN] KdTree.java:24:34: The constant 'isDebug' must be ALL_UPPERCASE, with words separated by underscores. [ConstantName]
[WARN] KdTree.java:26:21: The instance variable 'ROOT_ORIENTATION' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] KdTree.java:37:29: The parameter variable '_p' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] KdTree.java:37:41: The parameter variable '_orientation' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] KdTree.java:37:62: The parameter variable '_rect' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] KdTree.java:91:53: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:103:53: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:183:53: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:192:53: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:280:66: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:281:24: The local variable 'y_min' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:282:24: The local variable 'y_max' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:289:66: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:290:24: The local variable 'x_min' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:291:24: The local variable 'x_max' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:306:15: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:369:16: The local variable 'diff_max' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:370:16: The local variable 'diff_min' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:374:49: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:386:54: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:399:26: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:399:52: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:408:31: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:408:58: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:452:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:526:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:527:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:536:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:570:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] PointSET.java:47:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 31 warning.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:13:1: There is no need to define nested classes in this program. [Design]
[WARN] PointSET.java:74:20: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:205:36: Do not print to standard output in 'contains()'. [SideEffect]
[WARN] KdTree.java:213:40: Do not print to standard output in 'get()'. [SideEffect]
[WARN] KdTree.java:219:36: Do not print to standard output in 'get()'. [SideEffect]
[WARN] KdTree.java:300:40: Do not print to standard output in 'put()'. [SideEffect]
[WARN] KdTree.java:331:40: Do not print to standard output in 'put()'. [SideEffect]
[WARN] KdTree.java:341:30: The numeric literal '0.02' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:344:30: The numeric literal '0.002' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:361:36: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:365:40: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:401:40: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:410:40: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:416:40: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:435:42: Do not draw to standard drawing in 'range()'. [SideEffect]
[WARN] KdTree.java:435:43: The numeric literal '0.002' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:436:41: Do not draw to standard drawing in 'range()'. [SideEffect]
[WARN] KdTree.java:440:36: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:441:36: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:442:42: Do not draw to standard drawing in 'range()'. [SideEffect]
[WARN] KdTree.java:442:43: The numeric literal '0.025' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:444:40: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:459:36: Do not print to standard output in 'nearest()'. [SideEffect]
[WARN] KdTree.java:468:40: Do not print to standard output in 'nearest()'. [SideEffect]
[WARN] KdTree.java:477:40: Do not print to standard output in 'nearest()'. [SideEffect]
[WARN] KdTree.java:492:55: The numeric literal '10.0' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:493:36: Do not print to standard output in 'nearest()'. [SideEffect]
Checkstyle ends with 0 errors and 25 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt

    java.lang.NullPointerException

    KdTree$Node.access$100(KdTree.java:28)
    KdTree.nearest(KdTree.java:492)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1754)
    TestKdTree.main(TestKdTree.java:1969)

  * input1.txt
  * input5.txt
    - failed on trial 71 of 10000
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.205, 0.407)
    - student   nearest()           = (0.5, 0.4)
    - reference nearest()           = (0.2, 0.3)
    - student   distanceSquaredTo() = 0.087074
    - reference distanceSquaredTo() = 0.011474

  * input10.txt
    - failed on trial 23 of 10000
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.05, 0.608)
    - student   nearest()           = (0.226, 0.577)
    - reference nearest()           = (0.083, 0.51)
    - student   distanceSquaredTo() = 0.031937
    - reference distanceSquaredTo() = 0.010693

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 14 of 10000
    - sequence of points inserted:
      A  0.875 0.625
      B  0.5 0.875
      C  0.125 0.0
      D  0.375 0.125
      E  0.25 1.0
    - query point                   = (0.0, 0.75)
    - student   nearest()           = (0.5, 0.875)
    - reference nearest()           = (0.25, 1.0)
    - student   distanceSquaredTo() = 0.265625
    - reference distanceSquaredTo() = 0.125

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 11 of 10000
    - sequence of points inserted:
      A  1.0 0.9375
      B  0.0625 0.6875
      C  0.0 0.375
      D  0.9375 0.5625
      E  0.3125 0.1875
      F  0.25 0.3125
      G  0.1875 0.875
      H  0.75 0.0625
      I  0.4375 0.125
      J  0.6875 0.625
    - query point                   = (0.5625, 0.0)
    - student   nearest()           = (0.75, 0.0625)
    - reference nearest()           = (0.4375, 0.125)
    - student   distanceSquaredTo() = 0.0390625
    - reference distanceSquaredTo() = 0.03125

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 516 of 10000
    - sequence of points inserted:
      A  0.59375 0.09375
      B  0.375 0.28125
      C  0.71875 0.75
      D  0.84375 0.78125
      E  0.40625 1.0
      F  0.46875 0.53125
      G  0.25 0.875
      H  0.0 0.21875
      I  0.03125 0.0
      J  0.34375 0.375
      K  0.78125 0.59375
      L  0.65625 0.8125
      M  0.9375 0.4375
      N  0.4375 0.1875
      O  0.96875 0.71875
      P  0.125 0.5625
      Q  0.28125 0.03125
      R  0.625 0.25
      S  0.09375 0.125
      T  0.8125 0.34375
    - query point                   = (0.75, 0.40625)
    - student   nearest()           = (0.78125, 0.59375)
    - reference nearest()           = (0.8125, 0.34375)
    - student   distanceSquaredTo() = 0.0361328125
    - reference distanceSquaredTo() = 0.0078125

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 2 of 10000
    - query point                   = (0.671875, 0.546875)
    - student   nearest()           = (0.453125, 0.59375)
    - reference nearest()           = (0.515625, 0.53125)
    - student   distanceSquaredTo() = 0.050048828125
    - reference distanceSquaredTo() = 0.024658203125

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 8 of 10000
    - query point                   = (0.0772247314453125, 0.240814208984375)
    - student   nearest()           = (0.0729217529296875, 0.2356109619140625)
    - reference nearest()           = (0.0795440673828125, 0.2469635009765625)
    - student   distanceSquaredTo() = 0.000045589404181
    - reference distanceSquaredTo() = 0.000043193111196

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 15 of 10000
    - sequence of points inserted:
      A  0.0 0.625
      B  0.625 1.0
      C  0.5 0.625
      D  0.125 0.625
      E  0.0 0.125
      F  1.0 0.5
      G  0.0 0.25
      H  0.5 0.75
      I  0.875 1.0
      J  0.5 0.5
      K  0.875 0.0
      L  0.75 0.0
      M  0.25 1.0
      N  0.25 0.375
      O  1.0 0.75
    - query point                   = (0.0, 1.0)
    - student   nearest()           = (0.0, 0.625)
    - reference nearest()           = (0.25, 1.0)
    - student   distanceSquaredTo() = 0.140625
    - reference distanceSquaredTo() = 0.0625

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 40 of 10000
    - sequence of points inserted:
      A  0.75 1.0
      B  0.6875 0.625
      C  1.0 0.5
      D  0.8125 0.4375
      E  0.3125 0.9375
      F  0.375 0.9375
      G  0.6875 0.1875
      H  0.75 0.75
      I  0.1875 0.625
      J  0.5625 0.625
      K  1.0 0.25
      L  0.0625 0.75
      M  0.375 0.25
      N  0.3125 0.25
      O  0.5 0.875
      P  0.25 0.0
      Q  0.8125 0.375
      R  0.9375 0.5625
      S  0.5 0.0
      T  0.8125 0.5625
    - query point                   = (0.5625, 0.6875)
    - student   nearest()           = (0.6875, 0.625)
    - reference nearest()           = (0.5625, 0.625)
    - student   distanceSquaredTo() = 0.01953125
    - reference distanceSquaredTo() = 0.00390625

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 13 of 10000
    - query point                   = (0.5625, 0.84375)
    - student   nearest()           = (0.46875, 0.84375)
    - reference nearest()           = (0.625, 0.90625)
    - student   distanceSquaredTo() = 0.0087890625
    - reference distanceSquaredTo() = 0.0078125

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.3338165283203125, 0.5991973876953125)
    - student   nearest()           = (0.33270263671875, 0.604736328125)
    - reference nearest()           = (0.329193115234375, 0.5996856689453125)
    - student   distanceSquaredTo() = 0.000031920615584
    - reference distanceSquaredTo() = 0.000021614367142

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
    - failed on trial 11 of 10000
    - query point                   = (0.4375, 0.6875)
    - student   nearest()           = (0.4375, 0.625)
    - reference nearest()           = (0.4375, 0.6875)
    - student   distanceSquaredTo() = 0.00390625
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 7 of 10000
    - query point                   = (0.3359375, 0.578125)
    - student   nearest()           = (0.328125, 0.5859375)
    - reference nearest()           = (0.328125, 0.578125)
    - student   distanceSquaredTo() = 0.0001220703125
    - reference distanceSquaredTo() = 0.00006103515625

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 17 of 10000
    - query point                   = (0.6826171875, 0.181640625)
    - student   nearest()           = (0.6904296875, 0.177734375)
    - reference nearest()           = (0.68359375, 0.177734375)
    - student   distanceSquaredTo() = 0.000076293945312
    - reference distanceSquaredTo() = 0.000016212463379

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.5, 0.4)
    - reference nearest() = (0.5, 0.4)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.56, 0.29)
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.862, 0.825)
    - reference nearest() = (0.785, 0.725)
    - student   distanceSquaredTo() = 0.009349
    - reference distanceSquaredTo() = 0.00905
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.88, 0.73)
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H G J C F D E
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.0, 0.75)
    - reference nearest() = (0.0, 0.75)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.125, 0.5)
    - sequence of points inserted:
      A  0.625 0.375
      B  0.875 0.25
      C  0.25 0.0
      D  1.0 0.625
      E  0.0 0.75
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C E B D
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C E
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.3125, 0.3125)
    - reference nearest() = (0.3125, 0.3125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.25, 0.5)
    - sequence of points inserted:
      A  0.75 0.0
      B  0.875 0.625
      C  0.625 1.0
      D  0.1875 0.1875
      E  0.375 0.6875
      F  0.9375 0.0625
      G  0.8125 0.75
      H  1.0 0.8125
      I  0.0625 0.25
      J  0.3125 0.3125
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C D E J I B G H F
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C D E J I
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.15625, 0.75)
    - reference nearest() = (0.15625, 0.75)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.34375, 0.875)
    - sequence of points inserted:
      A  0.96875 0.84375
      B  0.78125 0.125
      C  0.125 0.46875
      D  0.90625 0.59375
      E  0.75 0.40625
      F  0.9375 0.25
      G  0.875 0.15625
      H  0.71875 0.8125
      I  0.6875 0.71875
      J  0.40625 0.0625
      K  0.84375 0.4375
      L  0.15625 0.75
      M  0.46875 0.375
      N  0.03125 0.625
      O  0.1875 0.09375
      P  0.28125 0.65625
      Q  0.4375 0.03125
      R  0.625 0.1875
      S  0.0 0.34375
      T  0.8125 0.21875
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D H I L P E F K G T M R N S J Q O
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D H I L P N
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.53125, 0.234375)
    - reference nearest() = (0.53125, 0.234375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 29
    - number of reference entries = 14
    - entry 11 of the two sequences are not equal
    - student   entry 11 = (0.078125, 0.6875)
    - reference entry 11 = (0.546875, 0.34375)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.5625, 0.78125)
    - reference nearest() = (0.5625, 0.78125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 50
    - number of reference entries = 15
    - entry 11 of the two sequences are not equal
    - student   entry 11 = (0.546875, 0.125)
    - reference entry 11 = (0.390625, 0.1328125)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.240234375, 0.26904296875)
    - reference nearest() = (0.240234375, 0.26904296875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 999
    - number of reference entries = 18
    - entry 17 of the two sequences are not equal
    - student   entry 17 = (0.26318359375, 0.32861328125)
    - reference entry 17 = (0.20654296875, 0.291015625)

    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()

    java.lang.NullPointerException

    KdTree$Node.access$100(KdTree.java:28)
    KdTree.nearest(KdTree.java:492)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:271)
    TestKdTree.test7(TestKdTree.java:1827)
    TestKdTree.main(TestKdTree.java:1987)

  * range()
==> FAILED

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 59 of 20000
    - student   nearest()  = (0.8125, 0.625)
    - reference nearest()  = (0.875, 0.5625)
    - student   distanceSquaredTo() = 0.0390625
    - reference distanceSquaredTo() = 0.03125

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 14 of 20000
    - student   nearest()  = (0.5078125, 0.296875)
    - reference nearest()  = (0.484375, 0.390625)
    - student   distanceSquaredTo() = 0.050048828125
    - reference distanceSquaredTo() = 0.02569580078125
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.5078125, 0.296875)
           st.insert(0.375, 0.265625)
           st.size()  ==>  2
           st.insert(0.1171875, 0.0703125)
           st.range([0.40625, 0.8125] x [0.6796875, 0.875])  ==>  empty
           st.isEmpty()  ==>  false
           st.contains((0.6953125, 0.0625))  ==>  false
           st.nearest((0.6640625, 0.921875))   ==>  (0.5078125, 0.296875)
           st.insert(0.3671875, 0.0078125)
           st.nearest((0.828125, 0.640625))   ==>  (0.5078125, 0.296875)
           st.insert(0.484375, 0.390625)
           st.contains((0.9375, 0.0625))  ==>  false
           st.nearest((0.6015625, 0.5))   ==>  (0.5078125, 0.296875)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 10 of 20000
    - student   nearest()  = (0.2958984375, 0.4345703125)
    - reference nearest()  = (0.216796875, 0.9072265625)
    - student   distanceSquaredTo() = 0.483166694641113
    - reference distanceSquaredTo() = 0.242280960083008
    - sequence of operations was:
           st.insert(0.2958984375, 0.4345703125)
           st.range([0.6669921875, 0.73046875] x [0.5947265625, 0.6337890625])  ==>  empty
           st.range([0.0390625, 0.1474609375] x [0.1923828125, 0.8671875])  ==>  empty
           st.nearest((0.1298828125, 0.6279296875))   ==>  (0.2958984375, 0.4345703125)
           st.insert(0.6328125, 0.130859375)
           st.nearest((0.6669921875, 0.142578125))   ==>  (0.6328125, 0.130859375)
           st.contains((0.962890625, 0.2890625))  ==>  false
           st.insert(0.216796875, 0.9072265625)
           st.insert(0.6064453125, 0.03515625)
           st.nearest((0.7001953125, 1.0))   ==>  (0.2958984375, 0.4345703125)

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 27 of 20000
    - student   nearest()  = (0.4984130859375, 0.4420166015625)
    - reference nearest()  = (0.304443359375, 0.046142578125)
    - student   distanceSquaredTo() = 0.080557465553284
    - reference distanceSquaredTo() = 0.069562703371048

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 11 of 20000
    - student   nearest()  = (0.905487060546875, 0.77362060546875)
    - reference nearest()  = (0.572357177734375, 0.1446533203125)
    - student   distanceSquaredTo() = 0.254581663757563
    - reference distanceSquaredTo() = 0.177287526428699
    - sequence of operations was:
           st.insert(0.905487060546875, 0.77362060546875)
           st.nearest((0.8709564208984375, 0.82525634765625))   ==>  (0.905487060546875, 0.77362060546875)
           st.nearest((0.5676727294921875, 0.2503509521484375))   ==>  (0.905487060546875, 0.77362060546875)
           st.range([0.537689208984375, 0.8039703369140625] x [0.2461090087890625, 0.5696868896484375])  ==>  empty
           st.insert(0.526763916015625, 0.6289520263671875)
           st.contains((0.6218109130859375, 0.9216766357421875))  ==>  false
           st.insert(0.276702880859375, 0.410980224609375)
           st.size()  ==>  3
           st.insert(0.572357177734375, 0.1446533203125)
           st.contains((0.0278778076171875, 0.83551025390625))  ==>  false
           st.nearest((0.973175048828125, 0.27362060546875))   ==>  (0.905487060546875, 0.77362060546875)

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 46 of 20000
    - student   nearest()  = (0.6875, 0.5625)
    - reference nearest()  = (0.5625, 0.0625)
    - student   distanceSquaredTo() = 0.20703125
    - reference distanceSquaredTo() = 0.06640625

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 75 of 20000
    - student   nearest()  = (0.421875, 0.0859375)
    - reference nearest()  = (0.3046875, 0.0859375)
    - student   distanceSquaredTo() = 0.05718994140625
    - reference distanceSquaredTo() = 0.0361328125

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 12 of 20000
    - student   nearest()  = (0.736328125, 0.779296875)
    - reference nearest()  = (0.369140625, 0.72265625)
    - student   distanceSquaredTo() = 0.042786598205566
    - reference distanceSquaredTo() = 0.040825843811035
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.0380859375, 0.3466796875)
           st.insert(0.2216796875, 0.1865234375)
           st.range([0.1064453125, 0.921875] x [0.462890625, 0.685546875])  ==>  empty
           st.range([0.6865234375, 0.994140625] x [0.3330078125, 0.3955078125])  ==>  empty
           st.contains((0.5546875, 0.8115234375))  ==>  false
           st.insert(0.9765625, 0.486328125)
           st.nearest((0.0546875, 0.984375))   ==>  (0.0380859375, 0.3466796875)
           st.range([0.5322265625, 0.9482421875] x [0.0400390625, 0.2841796875])  ==>  empty
           st.insert(0.736328125, 0.779296875)
           st.insert(0.369140625, 0.72265625)
           st.nearest((0.537109375, 0.8349609375))   ==>  (0.736328125, 0.779296875)

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 26 of 20000
    - student   nearest()  = (0.1790771484375, 0.3533935546875)
    - reference nearest()  = (0.256591796875, 0.493896484375)
    - student   distanceSquaredTo() = 0.10549022257328
    - reference distanceSquaredTo() = 0.044338420033455
    - sequence of operations was:
           st.insert(0.1790771484375, 0.3533935546875)
           st.insert(0.7373046875, 0.7281494140625)
           st.nearest((0.6163330078125, 0.153076171875))   ==>  (0.1790771484375, 0.3533935546875)
           st.insert(0.285400390625, 0.2628173828125)
           st.nearest((0.96826171875, 0.382080078125))   ==>  (0.7373046875, 0.7281494140625)
           st.nearest((0.2611083984375, 0.139892578125))   ==>  (0.285400390625, 0.2628173828125)
           st.contains((0.9205322265625, 0.5821533203125))  ==>  false
           st.range([0.041748046875, 0.2996826171875] x [0.64501953125, 0.9591064453125])  ==>  empty
           st.insert(0.5142822265625, 0.044921875)
           st.insert(0.5040283203125, 0.0865478515625)
           st.contains((0.34033203125, 0.6917724609375))  ==>  false
           st.contains((0.1365966796875, 0.230224609375))  ==>  false
           st.nearest((0.9642333984375, 0.7449951171875))   ==>  (0.7373046875, 0.7281494140625)
           st.contains((0.1162109375, 0.4429931640625))  ==>  false
           st.isEmpty()  ==>  false
           st.contains((0.1612548828125, 0.023681640625))  ==>  false
           st.insert(0.256591796875, 0.493896484375)
           st.insert(0.9820556640625, 0.37255859375)
           st.range([0.3858642578125, 0.953125] x [0.1131591796875, 0.401123046875])  ==>  empty
           st.insert(0.723876953125, 0.4093017578125)
           st.insert(0.2227783203125, 0.1387939453125)
           st.contains((0.275390625, 0.7811279296875))  ==>  false
           st.size()  ==>  9
           st.range([0.1751708984375, 0.69091796875] x [0.5631103515625, 0.97314453125])  ==>  empty
           st.range([0.04296875, 0.603759765625] x [0.37841796875, 0.8726806640625])  ==>  P
           st.nearest((0.15283203125, 0.6771240234375))   ==>  (0.1790771484375, 0.3533935546875)

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 24 of 20000
    - student   nearest()  = (0.1573028564453125, 0.4801483154296875)
    - reference nearest()  = (0.30316162109375, 0.370697021484375)
    - student   distanceSquaredTo() = 0.146719942335039
    - reference distanceSquaredTo() = 0.129286807961762
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.isEmpty()  ==>  true
           st.insert(0.1573028564453125, 0.4801483154296875)
           st.isEmpty()  ==>  false
           st.insert(0.7480926513671875, 0.14990234375)
           st.range([0.34478759765625, 0.8086090087890625] x [0.2079010009765625, 0.29876708984375])  ==>  empty
           st.range([0.6064453125, 0.976654052734375] x [0.4597015380859375, 0.7069854736328125])  ==>  empty
           st.contains((0.934173583984375, 0.186126708984375))  ==>  false
           st.range([0.2990264892578125, 0.9314117431640625] x [0.0049896240234375, 0.348663330078125])  ==>  G
           st.contains((0.2760009765625, 0.6536712646484375))  ==>  false
           st.insert(0.3507080078125, 0.6624755859375)
           st.size()  ==>  3
           st.nearest((0.33892822265625, 0.23974609375))   ==>  (0.1573028564453125, 0.4801483154296875)
           st.insert(0.9875030517578125, 0.620391845703125)
           st.contains((0.1479644775390625, 0.51531982421875))  ==>  false
           st.contains((0.614959716796875, 0.0837554931640625))  ==>  false
           st.nearest((0.548492431640625, 0.7865142822265625))   ==>  (0.3507080078125, 0.6624755859375)
           st.insert(0.30316162109375, 0.370697021484375)
           st.contains((0.9504852294921875, 0.152374267578125))  ==>  false
           st.isEmpty()  ==>  false
           st.size()  ==>  5
           st.insert(0.9382476806640625, 0.7185516357421875)
           st.contains((0.889556884765625, 0.5965576171875))  ==>  false
           st.nearest((0.054229736328125, 0.111236572265625))   ==>  (0.1573028564453125, 0.4801483154296875)

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 9 of 20000
    - student   nearest()  = (1.0, 0.0)
    - reference nearest()  = (1.0, 1.0)
    - student   distanceSquaredTo() = 1
    - reference distanceSquaredTo() = 0
    - sequence of operations was:
           st.insert(1.0, 0.0)
           st.insert(0.0, 1.0)
           st.nearest((0.0, 1.0))   ==>  (0.0, 1.0)
           st.contains((1.0, 1.0))  ==>  false
           st.insert(0.0, 0.0)
           st.contains((0.0, 0.0))  ==>  true
           st.isEmpty()  ==>  false
           st.insert(1.0, 1.0)
           st.nearest((1.0, 1.0))   ==>  (1.0, 0.0)

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 129 of 20000
    - student   nearest()  = (0.8125, 0.6875)
    - reference nearest()  = (0.75, 0.75)
    - student   distanceSquaredTo() = 0.078125
    - reference distanceSquaredTo() = 0.0703125

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 28 of 20000
    - student   nearest()  = (0.3984375, 0.6171875)
    - reference nearest()  = (0.3984375, 0.0078125)
    - student   distanceSquaredTo() = 0.2857666015625
    - reference distanceSquaredTo() = 0.0762939453125

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 31 of 20000
    - student   nearest()  = (0.513671875, 0.3818359375)
    - reference nearest()  = (0.5869140625, 0.4443359375)
    - student   distanceSquaredTo() = 0.02781867980957
    - reference distanceSquaredTo() = 0.019997596740723

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 8 of 20000
    - student   nearest()  = (0.1717529296875, 0.6783447265625)
    - reference nearest()  = (0.198486328125, 0.073974609375)
    - student   distanceSquaredTo() = 0.245965078473091
    - reference distanceSquaredTo() = 0.026198104023933
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.1717529296875, 0.6783447265625)
           st.nearest((0.2054443359375, 0.130126953125))   ==>  (0.1717529296875, 0.6783447265625)
           st.insert(0.198486328125, 0.073974609375)
           st.contains((0.0909423828125, 0.940185546875))  ==>  false
           st.contains((0.205810546875, 0.4317626953125))  ==>  false
           st.range([0.341796875, 0.7969970703125] x [0.3968505859375, 0.4805908203125])  ==>  empty
           st.nearest((0.0855712890625, 0.18994140625))   ==>  (0.1717529296875, 0.6783447265625)

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 8 of 20000
    - student   nearest()  = (0.778717041015625, 0.2879791259765625)
    - reference nearest()  = (0.9529571533203125, 0.4351654052734375)
    - student   distanceSquaredTo() = 0.352464536204934
    - reference distanceSquaredTo() = 0.348572433227673
    - sequence of operations was:
           st.insert(0.778717041015625, 0.2879791259765625)
           st.contains((0.9496917724609375, 0.726593017578125))  ==>  false
           st.insert(0.9529571533203125, 0.4351654052734375)
           st.contains((0.2942352294921875, 0.8802947998046875))  ==>  false
           st.nearest((0.00994873046875, 0.5061798095703125))   ==>  (0.778717041015625, 0.2879791259765625)
           st.contains((0.997467041015625, 0.337127685546875))  ==>  false
           st.insert(0.03955078125, 0.02099609375)
           st.nearest((0.49749755859375, 0.8108367919921875))   ==>  (0.778717041015625, 0.2879791259765625)

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 17/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          264                264
=> passed        2          360                360
=> passed        5          648                648
=> passed       10         1128               1128
=> passed       25         2568               2568
=> passed      100         9768               9768
=> passed      400        38568              38568
=> passed      800        76968              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          168                160
=> passed        2          304                288
=> passed        5          712                672
=> passed       10         1392               1312
=> passed       25         3432               3232
=> passed      100        13632              12832
=> passed      400        54432              51232
=> passed      800       108832             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 136.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1488805
=> passed   320000    1584725
=> passed   640000    1087865
=> passed  1280000     950750
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     325693
=> passed   320000     386977
=> passed   640000     276996
=> passed  1280000     264561
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       5814
=> passed    20000       1760
=> passed    40000        688
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000        470


Total: 0/14 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> FAILED   160000     319477              24.6  (12.3x)     56.4              53.9               0.0
=> FAILED   320000     518200              25.0  (12.5x)     57.3              54.8               0.0
=> FAILED   640000     456255              26.5  (13.3x)     61.1              58.6               0.0
=> FAILED  1280000     448211              28.6  (14.3x)     66.4              63.9               0.0
==> 0/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     361797              37.0              35.0               0.0
=> passed    20000     366139              39.3              37.3               0.0
=> passed    40000     353025              43.6              41.6               0.0
=> passed    80000     343389              44.0              42.0               0.0
=> passed   160000     283002              46.5              44.5               0.0
=> passed   320000     292276              50.1              48.1               0.0
=> passed   640000     301818              51.4              49.4               0.0


Total: 0/28 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================

