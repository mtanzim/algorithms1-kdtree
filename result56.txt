See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 3 warnings)
API:          PASSED

Spotbugs:     FAILED (11 warnings)
PMD:          FAILED (24 warnings)
Checkstyle:   FAILED (0 errors, 58 warnings)

Correctness:  20/35 tests passed
Memory:       16/16 tests passed
Timing:       14/42 tests passed

Aggregate score: 55.95%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 19K May  1 12:53 KdTree.java
3.9K May  1 12:53 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------
PointSET.java:54: warning: [rawtypes] found raw type: SET
        SET testPointSet = new SET<Point2D>();
        ^
  missing type arguments for generic class SET<Key>
  where Key is a type-variable:
    Key extends Comparable<Key> declared in class SET
PointSET.java:59: warning: [unchecked] unchecked call to add(Key) as a member of the raw type SET
            if (rect.contains(p)) testPointSet.add(p);
                                                  ^
  where Key is a type-variable:
    Key extends Comparable<Key> declared in class SET
PointSET.java:61: warning: [unchecked] unchecked conversion
        return testPointSet;
               ^
  required: Iterable<Point2D>
  found:    SET
3 warnings

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L D UCF_USELESS_CONTROL_FLOW UCF: Contains a useless control-flow statement, which leads to same result regardless of whether branch is taken.  At KdTree.java:[line 136]
L D UCF_USELESS_CONTROL_FLOW UCF: Contains a useless control-flow statement, which leads to same result regardless of whether branch is taken.  At KdTree.java:[line 191]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 90]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 182]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 279]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 288]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 373]
L B ES_COMPARING_STRINGS_WITH_EQ ES: Compares two strings for reference equality using '==' or '!='. Use the 'equals()' method for object equality (to check whether two strings correspond to the same sequence of characters).  At KdTree.java:[line 385]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'prevDistance' but that value is never used.  At KdTree.java:[line 462]
M D UC_USELESS_VOID_METHOD UC: The void method 'debugCmp()' appears to serve no purpose.  At KdTree.java:[line 197]
L P SIC_INNER_SHOULD_BE_STATIC_ANON SIC: Should the inner class 'PointSET$1Node' be refactored into a static nested class?  At PointSET.java:[lines 69-85]
Warnings generated: 11


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:25: The private instance (or static) variable 'ROOT_ORIENTATION' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:29: The private instance (or static) variable 'rect' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:32: The private instance (or static) variable 'orientation' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
KdTree.java:90: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:102: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:182: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:191: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:267: Avoid unused local variables, such as 'lt'. [UnusedLocalVariable]
KdTree.java:268: Avoid unused local variables, such as 'gt'. [UnusedLocalVariable]
KdTree.java:279: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:288: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:367: Avoid unused local variables, such as 'cmp'. [UnusedLocalVariable]
KdTree.java:368: Avoid unused local variables, such as 'diff_max'. [UnusedLocalVariable]
KdTree.java:369: Avoid unused local variables, such as 'diff_min'. [UnusedLocalVariable]
KdTree.java:373: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:385: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:398: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:398: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:407: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:407: Use equals() to compare strings instead of '==' or '!=' [UseEqualsToCompareStrings]
KdTree.java:460: Avoid unused local variables, such as 'prevDistance'. [UnusedLocalVariable]
PointSET.java:55: Avoid unused local variables, such as 'i'. [UnusedLocalVariable]
PointSET.java:70: The private instance (or static) variable 'myCurP' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:71: The private instance (or static) variable 'myDistanceSq' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 24 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:23:5: Declare static variables before instance variables, constructors, and methods. [DeclarationOrder]
[WARN] KdTree.java:23:34: The constant 'isDebug' must be ALL_UPPERCASE, with words separated by underscores. [ConstantName]
[WARN] KdTree.java:25:21: The instance variable 'ROOT_ORIENTATION' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] KdTree.java:36:29: The parameter variable '_p' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] KdTree.java:36:41: The parameter variable '_orientation' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] KdTree.java:36:62: The parameter variable '_rect' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] KdTree.java:90:53: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:102:53: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:182:53: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:191:53: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:279:66: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:280:24: The local variable 'y_min' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:281:24: The local variable 'y_max' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:288:66: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:289:24: The local variable 'x_min' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:290:24: The local variable 'x_max' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:305:15: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:368:16: The local variable 'diff_max' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:369:16: The local variable 'diff_min' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] KdTree.java:373:49: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:385:54: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:398:26: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:398:52: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:407:31: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:407:58: Compare string literals using 'equals()', not '=='. [StringLiteralEquality]
[WARN] KdTree.java:447:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:453:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:472:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:503:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:504:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:513:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:547:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] PointSET.java:46:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 33 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:12:1: There is no need to define nested classes in this program. [Design]
[WARN] PointSET.java:69:20: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:204:36: Do not print to standard output in 'contains()'. [SideEffect]
[WARN] KdTree.java:212:40: Do not print to standard output in 'get()'. [SideEffect]
[WARN] KdTree.java:218:36: Do not print to standard output in 'get()'. [SideEffect]
[WARN] KdTree.java:299:40: Do not print to standard output in 'put()'. [SideEffect]
[WARN] KdTree.java:330:40: Do not print to standard output in 'put()'. [SideEffect]
[WARN] KdTree.java:340:30: The numeric literal '0.02' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:343:30: The numeric literal '0.002' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:360:36: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:364:40: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:400:40: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:409:40: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:415:40: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:434:42: Do not draw to standard drawing in 'range()'. [SideEffect]
[WARN] KdTree.java:434:43: The numeric literal '0.002' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:435:41: Do not draw to standard drawing in 'range()'. [SideEffect]
[WARN] KdTree.java:439:36: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:440:36: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:441:42: Do not draw to standard drawing in 'range()'. [SideEffect]
[WARN] KdTree.java:441:43: The numeric literal '0.025' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:443:40: Do not print to standard output in 'range()'. [SideEffect]
[WARN] KdTree.java:458:36: Do not print to standard output in 'nearest()'. [SideEffect]
[WARN] KdTree.java:492:55: The numeric literal '10.0' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:493:36: Do not print to standard output in 'nearest()'. [SideEffect]
Checkstyle ends with 0 errors and 23 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
    - failed on trial 5 of 1000
    - sequence of points inserted:
      A  0.0 1.0
      B  0.25 0.75
      C  1.0 0.5
      D  0.25 0.75
      E  0.75 1.0
      F  1.0 0.5
      G  0.75 0.25
      H  0.25 1.0
      I  0.25 0.25
      J  0.25 0.5
    - query point                   = (0.25, 1.0)
    - student   nearest()           = (0.25, 0.75)
    - reference nearest()           = (0.25, 1.0)
    - student   distanceSquaredTo() = 0.0625
    - reference distanceSquaredTo() = 0

  * 15 random points in a 8-by-8 grid
    - failed on trial 3 of 1000
    - sequence of points inserted:
      A  0.5 0.875
      B  0.0 0.0
      C  0.625 1.0
      D  0.875 0.5
      E  0.875 0.375
      F  1.0 0.875
      G  1.0 0.25
      H  0.25 0.25
      I  1.0 0.5
      J  0.375 0.625
      K  0.5 0.5
      L  1.0 0.125
      M  1.0 0.625
      N  0.0 0.875
      O  1.0 0.875
    - query point                   = (0.875, 0.375)
    - student   nearest()           = (0.875, 0.5)
    - reference nearest()           = (0.875, 0.375)
    - student   distanceSquaredTo() = 0.015625
    - reference distanceSquaredTo() = 0

  * 20 random points in a 16-by-16 grid
    - failed on trial 18 of 1000
    - sequence of points inserted:
      A  0.8125 0.625
      B  0.375 0.5625
      C  1.0 1.0
      D  0.625 0.8125
      E  0.875 0.9375
      F  0.8125 0.3125
      G  0.5625 0.3125
      H  0.75 0.0625
      I  0.6875 0.3125
      J  0.0 0.3125
      K  0.9375 1.0
      L  0.625 0.5
      M  0.625 0.25
      N  0.625 0.5
      O  0.8125 0.3125
      P  0.1875 0.375
      Q  0.4375 0.875
      R  0.0625 0.125
      S  0.875 0.3125
      T  0.5 0.375
    - query point                   = (0.5625, 0.3125)
    - student   nearest()           = (0.625, 0.25)
    - reference nearest()           = (0.5625, 0.3125)
    - student   distanceSquaredTo() = 0.0078125
    - reference distanceSquaredTo() = 0

  * 100 random points in a 32-by-32 grid
    - failed on trial 8 of 1000
    - query point                   = (0.15625, 0.75)
    - student   nearest()           = (0.1875, 0.78125)
    - reference nearest()           = (0.15625, 0.75)
    - student   distanceSquaredTo() = 0.001953125
    - reference distanceSquaredTo() = 0

  * 10000 random points in a 65536-by-65536 grid
==> FAILED

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()

    java.util.NoSuchElementException: called min() with empty set

    edu.princeton.cs.algs4.SET.min(SET.java:155)
    PointSET.nearest(PointSET.java:99)
    TestPointSET.checkNearest(TestPointSET.java:212)
    TestPointSET.test5(TestPointSET.java:707)
    TestPointSET.main(TestPointSET.java:794)

 * range()
==> FAILED

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
    - throws wrong exception when calling range() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * nearest()
    - throws wrong exception when calling nearest() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 27 of 10000
    - student   nearest()  = (1.0, 0.0)
    - reference nearest()  = (1.0, 1.0)
    - student   distanceSquaredTo() = 1
    - reference distanceSquaredTo() = 0

  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 103 of 10000
    - student   nearest()  = (0.875, 0.4375)
    - reference nearest()  = (0.8125, 0.5625)
    - student   distanceSquaredTo() = 0.01953125
    - reference distanceSquaredTo() = 0

  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 882 of 10000
    - student   nearest()  = (0.359375, 0.3828125)
    - reference nearest()  = (0.359375, 0.4296875)
    - student   distanceSquaredTo() = 0.002197265625
    - reference distanceSquaredTo() = 0

  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 4639 of 10000
    - student   nearest()  = (0.5634765625, 0.99609375)
    - reference nearest()  = (0.568359375, 0.966796875)
    - student   distanceSquaredTo() = 0.000882148742676
    - reference distanceSquaredTo() = 0

  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> FAILED

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 4/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt

    java.lang.NullPointerException

    KdTree$Node.access$100(KdTree.java:27)
    KdTree.nearest(KdTree.java:492)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1754)
    TestKdTree.main(TestKdTree.java:1969)

  * input1.txt
  * input5.txt
    - failed on trial 7 of 10000
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.048, 0.475)
    - student   nearest()           = (0.4, 0.7)
    - reference nearest()           = (0.2, 0.3)
    - student   distanceSquaredTo() = 0.174529
    - reference distanceSquaredTo() = 0.053729

  * input10.txt
    - failed on trial 3 of 10000
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.318, 0.348)
    - student   nearest()           = (0.372, 0.497)
    - reference nearest()           = (0.417, 0.362)
    - student   distanceSquaredTo() = 0.025117
    - reference distanceSquaredTo() = 0.009997

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 15 of 10000
    - sequence of points inserted:
      A  0.9375 0.3125
      B  0.0625 0.6875
      C  0.25 0.5625
      D  0.1875 0.5
      E  0.8125 1.0
      F  0.5625 0.1875
      G  0.75 0.4375
      H  1.0 0.625
      I  0.375 0.125
      J  0.6875 0.875
    - query point                   = (0.4375, 0.75)
    - student   nearest()           = (0.6875, 0.875)
    - reference nearest()           = (0.25, 0.5625)
    - student   distanceSquaredTo() = 0.078125
    - reference distanceSquaredTo() = 0.0703125

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 15 of 10000
    - sequence of points inserted:
      A  0.09375 0.28125
      B  0.3125 0.84375
      C  0.5625 0.78125
      D  0.65625 0.5625
      E  0.5 0.53125
      F  0.9375 0.1875
      G  0.78125 0.625
      H  0.34375 0.0625
      I  0.75 0.59375
      J  0.40625 0.6875
      K  0.03125 0.0
      L  0.21875 0.125
      M  0.53125 0.75
      N  0.0625 0.96875
      O  0.8125 0.25
      P  0.28125 0.09375
      Q  0.15625 0.4375
      R  0.59375 0.9375
      S  0.4375 0.5
      T  0.875 0.375
    - query point                   = (0.1875, 1.0)
    - student   nearest()           = (0.3125, 0.84375)
    - reference nearest()           = (0.0625, 0.96875)
    - student   distanceSquaredTo() = 0.0400390625
    - reference distanceSquaredTo() = 0.0166015625

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 21 of 10000
    - query point                   = (0.234375, 0.0625)
    - student   nearest()           = (0.359375, 0.1875)
    - reference nearest()           = (0.40625, 0.078125)
    - student   distanceSquaredTo() = 0.03125
    - reference distanceSquaredTo() = 0.02978515625

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 2 of 10000
    - query point                   = (0.0186920166015625, 0.2663116455078125)
    - student   nearest()           = (0.0214691162109375, 0.2479705810546875)
    - reference nearest()           = (0.0085296630859375, 0.2645721435546875)
    - student   distanceSquaredTo() = 0.000344106927514
    - reference distanceSquaredTo() = 0.000106299296021

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 13 of 10000
    - sequence of points inserted:
      A  0.75 0.75
      B  0.25 0.75
      C  0.75 1.0
      D  0.5 0.5
      E  1.0 0.5
      F  1.0 1.0
      G  0.25 1.0
      H  0.0 1.0
      I  0.0 0.75
      J  0.75 0.0
    - query point                   = (1.0, 0.0)
    - student   nearest()           = (1.0, 0.5)
    - reference nearest()           = (0.75, 0.0)
    - student   distanceSquaredTo() = 0.25
    - reference distanceSquaredTo() = 0.0625

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 7 of 10000
    - sequence of points inserted:
      A  0.25 0.875
      B  0.75 0.875
      C  0.625 0.125
      D  1.0 0.75
      E  0.75 0.375
      F  0.125 0.375
      G  1.0 0.0
      H  0.5 1.0
      I  0.875 0.25
      J  0.625 0.875
      K  0.875 0.5
      L  0.125 0.25
      M  0.75 0.0
      N  0.125 0.0
      O  0.75 0.125
    - query point                   = (0.75, 0.625)
    - student   nearest()           = (0.75, 0.875)
    - reference nearest()           = (0.875, 0.5)
    - student   distanceSquaredTo() = 0.0625
    - reference distanceSquaredTo() = 0.03125

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 17 of 10000
    - sequence of points inserted:
      A  0.75 0.5625
      B  0.1875 0.4375
      C  0.875 0.25
      D  0.3125 0.75
      E  0.0625 0.6875
      F  1.0 0.75
      G  1.0 0.375
      H  0.25 0.1875
      I  0.25 0.0625
      J  0.4375 0.625
      K  0.6875 0.6875
      L  0.625 0.5
      M  0.625 1.0
      N  0.9375 0.125
      O  0.25 0.125
      P  0.9375 0.8125
      Q  0.9375 0.1875
      R  0.1875 0.5
      S  0.0625 0.0625
      T  0.875 0.8125
    - query point                   = (0.625, 0.1875)
    - student   nearest()           = (0.25, 0.1875)
    - reference nearest()           = (0.875, 0.25)
    - student   distanceSquaredTo() = 0.140625
    - reference distanceSquaredTo() = 0.06640625

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.40625, 0.0)
    - student   nearest()           = (0.53125, 0.09375)
    - reference nearest()           = (0.34375, 0.03125)
    - student   distanceSquaredTo() = 0.0244140625
    - reference distanceSquaredTo() = 0.0048828125

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.9967041015625, 0.8414154052734375)
    - student   nearest()           = (0.9996337890625, 0.8297119140625)
    - reference nearest()           = (0.993927001953125, 0.8406829833984375)
    - student   distanceSquaredTo() = 0.000145554775372
    - reference distanceSquaredTo() = 0.000008248724043

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
    - failed on trial 3 of 10000
    - query point                   = (0.625, 0.75)
    - student   nearest()           = (0.625, 0.6875)
    - reference nearest()           = (0.625, 0.75)
    - student   distanceSquaredTo() = 0.00390625
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 5 of 10000
    - query point                   = (0.9609375, 0.078125)
    - student   nearest()           = (0.96875, 0.0703125)
    - reference nearest()           = (0.9609375, 0.0859375)
    - student   distanceSquaredTo() = 0.0001220703125
    - reference distanceSquaredTo() = 0.00006103515625

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 3 of 10000
    - query point                   = (0.642578125, 0.3193359375)
    - student   nearest()           = (0.6435546875, 0.328125)
    - reference nearest()           = (0.6376953125, 0.3212890625)
    - student   distanceSquaredTo() = 0.000078201293945
    - reference distanceSquaredTo() = 0.000027656555176

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.4, 0.7)
    - reference nearest() = (0.4, 0.7)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.55, 0.8)
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D E
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.564, 0.413)
    - reference nearest() = (0.564, 0.413)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.92, 0.2)
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G J H
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G J H I
    - failed on trial 2 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.5, 0.375)
    - reference nearest() = (0.5, 0.375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.125, 0.0)
    - sequence of points inserted:
      A  0.625 0.625
      B  0.75 0.125
      C  1.0 0.25
      D  0.5 0.375
      E  0.375 0.875
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A D E
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A D E B C
    - failed on trial 2 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.8125, 0.8125)
    - reference nearest() = (0.8125, 0.8125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.5, 1.0)
    - sequence of points inserted:
      A  0.0625 0.5625
      B  0.1875 0.75
      C  0.875 0.6875
      D  0.4375 0.125
      E  0.8125 0.8125
      F  0.125 0.9375
      G  0.75 0.625
      H  0.0 0.375
      I  0.25 0.0625
      J  1.0 0.3125
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E F
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E F C D G
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.75, 0.9375)
    - reference nearest() = (0.75, 0.9375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.65625, 0.75)
    - sequence of points inserted:
      A  0.40625 1.0
      B  0.5625 0.96875
      C  0.78125 0.40625
      D  0.59375 0.28125
      E  0.75 0.9375
      F  0.34375 0.53125
      G  0.15625 0.59375
      H  0.5 0.5
      I  0.6875 0.15625
      J  0.46875 0.4375
      K  0.96875 0.71875
      L  0.03125 0.46875
      M  0.125 0.875
      N  0.53125 0.3125
      O  0.09375 0.0625
      P  0.21875 0.25
      Q  0.4375 0.625
      R  0.9375 0.03125
      S  0.90625 0.90625
      T  0.71875 0.375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D E H Q
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D E H Q K S R
    - failed on trial 2 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.1875, 0.140625)
    - reference nearest() = (0.1875, 0.140625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - entry 8 of the two sequences are not equal
    - student   entry 8 = (0.46875, 0.53125)
    - reference entry 8 = (0.578125, 0.375)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.0, 0.8203125)
    - reference nearest() = (0.0, 0.8203125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 7
    - number of reference entries = 9
    - failed on trial 4 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.8603515625, 0.8837890625)
    - reference nearest() = (0.8603515625, 0.8837890625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 17
    - number of reference entries = 26
    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()

    java.lang.NullPointerException

    KdTree$Node.access$100(KdTree.java:27)
    KdTree.nearest(KdTree.java:492)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:271)
    TestKdTree.test7(TestKdTree.java:1827)
    TestKdTree.main(TestKdTree.java:1987)

  * range()
==> FAILED

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
    - throws wrong exception when calling nearest() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 28 of 20000
    - student   nearest()  = (0.546875, 0.7578125)
    - reference nearest()  = (0.8125, 0.703125)
    - student   distanceSquaredTo() = 0.10986328125
    - reference distanceSquaredTo() = 0.01422119140625

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 62 of 20000
    - student   nearest()  = (0.2763671875, 0.5615234375)
    - reference nearest()  = (0.0341796875, 0.51953125)
    - student   distanceSquaredTo() = 0.072957038879395
    - reference distanceSquaredTo() = 0.05388069152832

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 33 of 20000
    - student   nearest()  = (0.338134765625, 0.4561767578125)
    - reference nearest()  = (0.17578125, 0.1480712890625)
    - student   distanceSquaredTo() = 0.070143058896065
    - reference distanceSquaredTo() = 0.046133652329445

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 33 of 20000
    - student   nearest()  = (0.46221923828125, 0.670013427734375)
    - reference nearest()  = (0.583892822265625, 0.71612548828125)
    - student   distanceSquaredTo() = 0.08213356253691
    - reference distanceSquaredTo() = 0.065764405066147

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 254 of 20000
    - student   nearest()  = (0.125, 0.75)
    - reference nearest()  = (0.3125, 0.875)
    - student   distanceSquaredTo() = 0.03125
    - reference distanceSquaredTo() = 0.00390625

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 34 of 20000
    - student   nearest()  = (0.359375, 0.6015625)
    - reference nearest()  = (0.640625, 0.84375)
    - student   distanceSquaredTo() = 0.0634765625
    - reference distanceSquaredTo() = 0.04547119140625

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 11 of 20000
    - student   nearest()  = (0.87890625, 0.49609375)
    - reference nearest()  = (0.404296875, 0.3505859375)
    - student   distanceSquaredTo() = 0.205509185791016
    - reference distanceSquaredTo() = 0.124859809875488
    - sequence of operations was:
           st.insert(0.4541015625, 0.005859375)
           st.nearest((0.623046875, 0.1923828125))   ==>  (0.4541015625, 0.005859375)
           st.insert(0.404296875, 0.3505859375)
           st.size()  ==>  2
           st.range([0.1728515625, 0.958984375] x [0.107421875, 0.9443359375])  ==>  W
           st.nearest((0.2900390625, 0.5361328125))   ==>  (0.404296875, 0.3505859375)
           st.insert(0.87890625, 0.49609375)
           st.insert(0.0849609375, 0.87890625)
           st.contains((0.1796875, 0.4423828125))  ==>  false
           st.nearest((0.166015625, 0.95703125))   ==>  (0.0849609375, 0.87890625)
           st.nearest((0.47265625, 0.697265625))   ==>  (0.87890625, 0.49609375)

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 42 of 20000
    - student   nearest()  = (0.7247314453125, 0.7052001953125)
    - reference nearest()  = (0.824462890625, 0.4683837890625)
    - student   distanceSquaredTo() = 0.08167864382267
    - reference distanceSquaredTo() = 0.053793340921402

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 47 of 20000
    - student   nearest()  = (0.5666046142578125, 0.7490386962890625)
    - reference nearest()  = (0.487823486328125, 0.45733642578125)
    - student   distanceSquaredTo() = 0.102312716189772
    - reference distanceSquaredTo() = 0.037018285132945

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 32 of 20000
    - student   nearest()  = (0.1875, 0.625)
    - reference nearest()  = (0.125, 0.625)
    - student   distanceSquaredTo() = 0.015625
    - reference distanceSquaredTo() = 0.00390625

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 103 of 20000
    - student   nearest()  = (0.7265625, 0.59375)
    - reference nearest()  = (0.9140625, 0.734375)
    - student   distanceSquaredTo() = 0.03253173828125
    - reference distanceSquaredTo() = 0.03106689453125

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 27 of 20000
    - student   nearest()  = (0.7734375, 0.603515625)
    - reference nearest()  = (0.720703125, 0.4453125)
    - student   distanceSquaredTo() = 0.17855167388916
    - reference distanceSquaredTo() = 0.088017463684082

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 64 of 20000
    - student   nearest()  = (0.1009521484375, 0.4058837890625)
    - reference nearest()  = (0.2227783203125, 0.026611328125)
    - student   distanceSquaredTo() = 0.074567571282387
    - reference distanceSquaredTo() = 0.039482861757278

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 39 of 20000
    - student   nearest()  = (0.5876922607421875, 0.7578125)
    - reference nearest()  = (0.869476318359375, 0.6880950927734375)
    - student   distanceSquaredTo() = 0.044009414035827
    - reference distanceSquaredTo() = 0.009060654789209

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 16/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          264                264
=> passed        2          360                360
=> passed        5          648                648
=> passed       10         1128               1128
=> passed       25         2568               2568
=> passed      100         9768               9768
=> passed      400        38568              38568
=> passed      800        76968              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          168                160
=> passed        2          304                288
=> passed        5          712                672
=> passed       10         1392               1312
=> passed       25         3432               3232
=> passed      100        13632              12832
=> passed      400        54432              51232
=> passed      800       108832             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 136.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1443804
=> passed   320000    1543794
=> passed   640000    1215793
=> passed  1280000    1036476
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     330820
=> passed   320000     368767
=> passed   640000     278979
=> passed  1280000     264434
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3684
=> passed    20000       1802
=> passed    40000        714
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000        558
=> passed    20000        237
=> passed    40000        100
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> FAILED   160000     340793              24.6  (12.3x)     56.4              53.9               0.0
=> FAILED   320000     496056              25.0  (12.5x)     57.3              54.8               0.0
=> FAILED   640000     390336              26.5  (13.3x)     61.1              58.6               0.0
=> FAILED  1280000     422524              28.6  (14.3x)     66.4              63.9               0.0
==> 0/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     367838              37.0              35.0               0.0
=> passed    20000     373528              39.3              37.3               0.0
=> passed    40000     382495              43.6              41.6               0.0
=> passed    80000     339332              44.0              42.0               0.0
=> passed   160000     313070              46.5              44.5               0.0
=> passed   320000     312726              50.1              48.1               0.0
=> passed   640000     322122              51.4              49.4               0.0


Total: 0/28 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
